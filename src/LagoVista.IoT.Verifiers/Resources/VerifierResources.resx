<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Common_IsPublic" xml:space="preserve">
    <value>Is Public</value>
  </data>
  <data name="Common_Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Common_Key_Help" xml:space="preserve">
    <value>The key is used to identify this item in scripts and must be unique with respect to it's parent. One a key has been assigned, it can not be changed.</value>
  </data>
  <data name="Common_Key_Validation" xml:space="preserve">
    <value>The key must use only letters and numbers, and must be lowercase and must be between 3 and 20 characters.</value>
  </data>
  <data name="Common_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Verifier_Aborted" xml:space="preserve">
    <value>Aborted after completing interations:</value>
    <comment>Will append number of iterations completed to messages</comment>
  </data>
  <data name="Verifier_Actual" xml:space="preserve">
    <value>Actual:</value>
  </data>
  <data name="Verifier_Component" xml:space="preserve">
    <value>Component</value>
  </data>
  <data name="Verifier_Description" xml:space="preserve">
    <value>You can add Verifiers to certain components of your deployment.  A verifier can be thought of as a test that can be ran against certain components to verifiy they behave the way you expect.</value>
  </data>
  <data name="Verifier_Empty" xml:space="preserve">
    <value>-empty-</value>
  </data>
  <data name="Verifier_Expected" xml:space="preserve">
    <value>Expected:</value>
  </data>
  <data name="Verifier_ExpectedOutput" xml:space="preserve">
    <value>Expected Output</value>
  </data>
  <data name="Verifier_Expected_NotMatch_Actual" xml:space="preserve">
    <value>Expected Value does not match Actual Value</value>
  </data>
  <data name="Verifier_Header" xml:space="preserve">
    <value>Message Headers </value>
  </data>
  <data name="Verifier_Header_Help" xml:space="preserve">
    <value>You can enter Key Value Pairs that represent the contents of the heades of your messages to be evaluated by the Verifier</value>
  </data>
  <data name="Verifier_Help" xml:space="preserve">
    <value>You can add Verifiers to certain components of your deployment.  A verifier can be thought of as a test that can be ran against certain components to verifiy they behave the way you expect.</value>
  </data>
  <data name="Verifier_Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Verifier_InputType" xml:space="preserve">
    <value>Input Type</value>
  </data>
  <data name="Verifier_InputType_Binary" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Verifier_InputType_Help" xml:space="preserve">
    <value>You will need to specify how the input data will be presented to the verifier, if you select string, you can simply enter the string to be used for testing.  If you select binary, you will need to enter two characters consisting of 0, 1, 2, 3...E, F, a typical binary message might look like 02 05 03 5F C3 A2 04 05</value>
  </data>
  <data name="Verifier_InputType_Select" xml:space="preserve">
    <value>-select input type-</value>
  </data>
  <data name="Verifier_InputType_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Verifier_IterationCountZero" xml:space="preserve">
    <value>Nothing to do, interation count was zero</value>
  </data>
  <data name="Verifier_MissingExpectedOutput" xml:space="preserve">
    <value>Missing Expected Output</value>
  </data>
  <data name="Verifier_MissingExpectedOutputs" xml:space="preserve">
    <value>Missing Expected Outputs</value>
  </data>
  <data name="Verifier_MissingInput" xml:space="preserve">
    <value>Input is required.</value>
  </data>
  <data name="Verifier_MissingInputType" xml:space="preserve">
    <value>Missing Input Type</value>
  </data>
  <data name="Verifier_ParserFailed" xml:space="preserve">
    <value>Parser Failed</value>
  </data>
  <data name="Verifier_PathAndQueryString" xml:space="preserve">
    <value>Path and Query String</value>
  </data>
  <data name="Verifier_PathAndQueryString_Help" xml:space="preserve">
    <value>You can provide a path and query string to test the expression. </value>
  </data>
  <data name="Verifier_ResultDoesNotContainKey" xml:space="preserve">
    <value>Result set does not contain key:</value>
    <comment>Will append some additional text to message</comment>
  </data>
  <data name="Verifier_ShouldSucceed" xml:space="preserve">
    <value>Should Succeed</value>
  </data>
  <data name="Verifier_ShouldSucceed_Help" xml:space="preserve">
    <value>In some cases the verifier you are testing should not succeed, you are testing a case in which it would fail.  If that is the case, this value should not be checked.</value>
  </data>
  <data name="Verifier_Title" xml:space="preserve">
    <value>Verifier</value>
  </data>
  <data name="Verifier_VerifierType" xml:space="preserve">
    <value>Verifier Type</value>
  </data>
  <data name="Verifier_VerifierType_MessageFieldParser" xml:space="preserve">
    <value>Message Field Parser</value>
  </data>
  <data name="Verifier_VerifierType_Planner" xml:space="preserve">
    <value>Planner</value>
  </data>
</root>